// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package plonkverifier

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PlonkverifierMetaData contains all meta data concerning the Plonkverifier contract.
var PlonkverifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b5061290b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80637e4f7a8a1461002d575b5f80fd5b61004061003b36600461281b565b610054565b604051901515815260200160405180910390f35b5f604051610240810161006684610497565b61007085856104aa565b610079866104f9565b6100828761050f565b5f61008e86868a6106a9565b9050610099816109e0565b90506100a58189610a46565b90506100b18189610ad4565b5060608201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000610108846302000000856127bd565b086101c08401525061011b818587610b3f565b61012682868a610eb4565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018183086101a08401525061015d905061125a565b610166866123b1565b61016f86612302565b61017886611f1d565b61018186611a48565b61018a866117a9565b610193866113ab565b61020001519050612813565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f77726f6e67206e756d626572206f66207075626c696320696e707574730000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6572726f722070616972696e67000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f722072616e646f6d2067656e206b7a670000000000000000000000006044820152606481fd5b600281146104a7576104a761019f565b50565b5f5b818110156104f4577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000833511156104e5576104e561025d565b602092909201916001016104ac565b505050565b61036081811461050b5761050b6102bc565b5050565b61018081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156105455761054561031b565b506101a081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008135111561057c5761057c61031b565b506101c081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156105b3576105b361031b565b506101e081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156105ea576105ea61031b565b5061020081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156106215761062161031b565b5061026081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000813511156106585761065861031b565b5061030081015f5b60018110156104f4577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000008235111561069a5761069a61031b565b60209190910190600101610660565b5f60405161024081016467616d6d6181527f03bd34c824318212b17d6f525d4b3de7ecb2bbeaf28a94d742744f26e7746c1e60208201527f206fa855682e90d25a671fe04b6a49f16c18e20118771f06d74a72b0d65eb9a360408201527f12c498802720703e8785996b1dc9a2bfa8178ddbdc5d1d59182e1f16af70397b60608201527f2eba0aa189bc550c32e2cca647ab6a7b206886eabf7a39c77d6fb5faaa2132bf60808201527f0f5cfc2f8ce11184e3fa70c99295e1a0a6300f58e4f828e6a50c35d3480d288760a08201527f04cb0ed31f2095f6d6fe5511eab46b8edd98f8e1e8f12e6511bbb31b06e6b8c060c08201527f2df74c9df7fab4c4a3f3422a93be41a0a5bcf15f5125d1cda2b9b087babd4d0f60e08201527f0b8dd89a9517acfe97ec31d7fff285d94b364bf724ae1dbe7eb25543622863766101008201527f272493f6ed2aa9774e887d35c72f26209c546fbb8b7ae09e0f0494ac2e8511816101208201527f197005946f3b12fc9be26e44ce407df7fe8cc1b57378dd5a441dc187b960405c6101408201527f1315c05a85c08181a39de0be7259bb0103faa576fd24a49cf293136a64e9be636101608201527f28b68e97b0c1e8f59a7067691a6f909bbf3ebd18a5261744c4e7ba9cdba297846101808201527f11e1a0d6eec434f5dbb8d6877434df9c80b0670575f03f8bab575c73524e32716101a08201527f0a90de9f93bf1fcb5bbbd5f207cd8cfe413ce7ef7a9109ceaa7d2ab4e368f0906101c08201527f16caf8ef8960624b243c22c993674cc80a0986098d601e2f89e049e903b0c08c6101e08201527f05bb29d39aafdb5d337abe750449ba91b24ca09fd90a4f2d7c39a00a8751402d6102008201527f215f41d78b60bbf7106e49563212888c4bc0b349f47f7c3d71e1ad99ffaab1606102208201527f06c211d240dcd9f90d5ae3f8deb56a4c036c5d1a62bf5417bca13574ba95dd18610240820152610260810160208602808883379081019060c0808784375061030501905060208282601b820160025afa9050806109aa576109aa6103d9565b5080519250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182066040820152509392505050565b5f60405161024060405101636265746181528360208201526020816024601c840160025afa80610a1257610a126103d9565b5080519250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018206602082015250919050565b5f60405161024060405101606564616c7068618252602082018681526020810190506103208601600160400280828437928301929190910190506040610220870182375060208282601b850160025afa905080610aa557610aa56103d9565b50517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181069091529392505050565b60405161024060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610b0f57610b0f6103d9565b50517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019006606091909101525050565b5f60405160608101516101c0820151915085610b5d81878585610bd8565b5f92505f91505b85821015610bce577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001853582510992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018385086020958601959094506001929092019101610b64565b5050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff05360983096001855f5b86811015610cc6577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a8409925060209190910190600101610c21565b50610cd2818789610d8a565b5060019050855f5b86811015610d80577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a84099250600101610cda565b5050505050505050565b600183525f805b83811015610ddf5781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610d91565b506020810382019150808401935050610e206020840160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010385516127bd565b5f5b83811015610ead5760208503945082517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018651840984527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090940193925050600101610e22565b5050505050565b5f60405160608101516101c0820151915061032084015f80610edc8960208501358535611061565b9150610ef08963014042ac8a018787610f26565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018082840987089998505050505050505050565b5f610f5285857f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a6127bd565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103840894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff0536098209905061100b867f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff876127bd565b94507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018482099695505050505050565b5f83525f602084015280604084015250806060830152505f6080820153603060818201535f60828201536042608382015360536084820153604260858201536032608682015360326087820153602d608882015360506089820153606c608a820153606f608b820153606e608c820153606b608d820153600b608e8201535f602082608f8460025afa806110f7576110f76103d9565b8251600160208501536042602185015360536022850153604260238501536032602485015360326025850153602d602685015360506027850153606c6028850153606f6029850153606e602a850153606b602b850153600b602c850153602084602d8660025afa91508161116d5761116d6103d9565b8351186020840152600260408401536042604184015360536042840153604260438401536032604484015360326045840153602d604684015360506047840153606c6048840153606f6049840153606e604a840153606b604b840153600b604c84015360208301602081602d8360025afa915050806111ee576111ee6103d9565b507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017001000000000000000000000000000000008351099050602082015160801c7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018183089392505050565b604051610240604051016101c08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086112e0837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff836127bd565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e5aaf0a66b91f8030da595e7d1c6787b9b45fc54c546729acf1ff053609820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018282098451935091507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001905082820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018282099050806080840152505050565b60405161024081016101608201518152610180820151602082015261028083013560408201526102a08301356060820152610220830135608082015261024083013560a08201526102c083013560c08201526102e083013560e082015260608201516101008201526101e08201516101208201526020816101408360025afa8061143757611437610438565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182510690508160408101925061028085013581526102a0850135602082015261148783836102c0880184612724565b610160840161149c8484610220890184612724565b61014085016114b08461026089018361276b565b7f1fa4be93b5e7f7e674d5059b63554fab99638b304ed8310e9fa44c281ac9b03b85527f1a01ae7fac6228e39d3cb5a5e71fd31160f3241e79a5f48ffb3737e6c389b7216020860152805160408087019182529095908160608160075afa91508161151d5761151d6103d9565b60208101915081517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470382526115558682858661261b565b5050836040850194506115728560608801516102808a01846126b2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2a734ebb326341efa19b0361d9130cd47b26b7488dc6d26eeccd4f3eb878331a60608801510995507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186850993506115f285856102c08a0184612724565b6115fe8582848561261b565b50602082810180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470381528251865291810151908501527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408501527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608501527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808501527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a0850152905160c0840152805160e08401527f22f1acbb03c4508760c2430af35865e7cdf9f3eb1224504fdcc3708ddb954a486101008401527f2a344fad01c2ed0ed73142ae1752429eaea515c6f3f6b941103cc21c2308e1cb6101208401527f159f15b842ba9c8449aa3268f981010d4c7142e5193473d80b464e964845c3f86101408401527f0efd30ac7b6f8d0d3ccbc2207587c2acbad1532dc0293f0d034cf8258cd428b361016084015292506104f490508160405160205f6101808460085afa8061179b5761179b61037a565b505f51610200919091015250565b6040516101e081015160e082015161016083019081526101008301516101808401526101208301516101408401526102408301916102608401916102808501919081906117f886838a84612724565b61180b826101808a016101408a0161276b565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018383099150611840868360408b0184612724565b611853826101a08a016101408a0161276b565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018383099150611888868360808b0184612724565b61189b826101c08a016101408a0161276b565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f03bd34c824318212b17d6f525d4b3de7ecb2bbeaf28a94d742744f26e7746c1e86527f206fa855682e90d25a671fe04b6a49f16c18e20118771f06d74a72b0d65eb9a38552611913848388846126dd565b611926826101e08a016101408a0161276b565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f12c498802720703e8785996b1dc9a2bfa8178ddbdc5d1d59182e1f16af70397b86527f2eba0aa189bc550c32e2cca647ab6a7b206886eabf7a39c77d6fb5faaa2132bf855261199e848388846126dd565b6119b1826102008a016101408a0161276b565b61030088017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992507f215f41d78b60bbf7106e49563212888c4bc0b349f47f7c3d71e1ad99ffaab16087527f06c211d240dcd9f90d5ae3f8deb56a4c036c5d1a62bf5417bca13574ba95dd188652611a2e858489856126dd565b611a3d83826101408b0161276b565b505050505050505050565b6040516467616d6d616102408201908152606082015161026083015260e08201516102808301526101008201516102a083015260c0836102c08401377f03bd34c824318212b17d6f525d4b3de7ecb2bbeaf28a94d742744f26e7746c1e6101408201527f206fa855682e90d25a671fe04b6a49f16c18e20118771f06d74a72b0d65eb9a36101608201527f12c498802720703e8785996b1dc9a2bfa8178ddbdc5d1d59182e1f16af70397b610180808301919091527f2eba0aa189bc550c32e2cca647ab6a7b206886eabf7a39c77d6fb5faaa2132bf6101a0808401919091527f215f41d78b60bbf7106e49563212888c4bc0b349f47f7c3d71e1ad99ffaab1606101c0808501919091527f06c211d240dcd9f90d5ae3f8deb56a4c036c5d1a62bf5417bca13574ba95dd186101e0808601919091526101208601516102008087019190915293870135610220860152918601356102408501528501356102608401528401356102808301528301356102a08201526102c081016103008401602081833750610260840135602091820152601b906102e5906101e085018285850160025afa9250505080611bfe57611bfe6103d9565b506101e00180517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019006905250565b604051610240604051017f2df74c9df7fab4c4a3f3422a93be41a0a5bcf15f5125d1cda2b9b087babd4d0f81527f0b8dd89a9517acfe97ec31d7fff285d94b364bf724ae1dbe7eb25543622863766020820152611c97604082016101808501358360e08601612687565b7f272493f6ed2aa9774e887d35c72f26209c546fbb8b7ae09e0f0494ac2e85118181527f197005946f3b12fc9be26e44ce407df7fe8cc1b57378dd5a441dc187b960405c6020820152611cf7604082016101a08501358360e086016126dd565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f1315c05a85c08181a39de0be7259bb0103faa576fd24a49cf293136a64e9be6382527f28b68e97b0c1e8f59a7067691a6f909bbf3ebd18a5261744c4e7ba9cdba297846020830152611d8060408301828460e087016126dd565b507f11e1a0d6eec434f5dbb8d6877434df9c80b0670575f03f8bab575c73524e327181527f0a90de9f93bf1fcb5bbbd5f207cd8cfe413ce7ef7a9109ceaa7d2ab4e368f0906020820152611de1604082016101c08501358360e086016126dd565b7f16caf8ef8960624b243c22c993674cc80a0986098d601e2f89e049e903b0c08c81527f05bb29d39aafdb5d337abe750449ba91b24ca09fd90a4f2d7c39a00a8751402d6020820152611e3c604082018260e085018061261b565b610300830161032084015f5b6001811015611e88578135845260208201356020850152611e726040850184358660e089016126dd565b6020929092019160409190910190600101611e48565b5050507f0f5cfc2f8ce11184e3fa70c99295e1a0a6300f58e4f828e6a50c35d3480d288781527f04cb0ed31f2095f6d6fe5511eab46b8edd98f8e1e8f12e6511bbb31b06e6b8c06020820152611ee660408201858360e086016126dd565b61022083013581526102408301356020820152611f0b60408201868360e086016126dd565b610ead8160a0840160e085018061261b565b6040516020810151604082015160608301515f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a0998507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808c01358a0894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160058a0993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08c0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a099250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08b0135830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000187830891507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183850997507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018289097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001908103985085890997507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808a0151890897506122f688828c611c2d565b50505050505050505050565b604051600263020000000161024060405101612323818360608601516127bd565b91506123388183610140870160a087016126b2565b61234b81610100860160a0860180612651565b61235a818360a0860180612687565b61236c8160c0860160a0860180612651565b612383816101c085015160a0860160a08701612687565b505060c00180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905250565b6040515f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040830151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180840135820890505f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016040840151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0850135820890505f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018184099250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000015f840151830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610260850135830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840151830860808401519092507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190810391508183087f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036101209390930192909252505050565b8151845260208201516020850152825160408501526020830151606085015260408160808660065afa80610ead57610ead6101fe565b8151845260208201516020850152823560408501526020830135606085015260408160808660065afa80610ead57610ead6101fe565b815184526020820151602085015282604085015260408160608660075afa80610ead57610ead6101fe565b813584526020820135602085015282604085015260408160608660075afa80610ead57610ead6101fe565b815184526020820151602085015282604085015260408460608660075afa815160408601526020820151606086015260408260808760065afa1680610ead57610ead6101fe565b813584526020808301359085015260408481018490528460608160075afa815160408601526020820151606086015260408260808760065afa1680610ead57610ead6101fe565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b602083526020808401526020604084015280606084015250806080830152507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08201525f60208260c08460055afa50505190565b949350505050565b5f805f806040858703121561282e575f80fd5b843567ffffffffffffffff80821115612845575f80fd5b818701915087601f830112612858575f80fd5b813581811115612866575f80fd5b886020828501011115612877575f80fd5b602092830196509450908601359080821115612891575f80fd5b818701915087601f8301126128a4575f80fd5b8135818111156128b2575f80fd5b8860208260051b85010111156128c6575f80fd5b9598949750506020019450505056fea2646970667358221220021c9f4963b75de2d4059697476948305ee7f4e91efdfb48ee53559715dc3c6b64736f6c63430008140033",
}

// PlonkverifierABI is the input ABI used to generate the binding from.
// Deprecated: Use PlonkverifierMetaData.ABI instead.
var PlonkverifierABI = PlonkverifierMetaData.ABI

// PlonkverifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PlonkverifierMetaData.Bin instead.
var PlonkverifierBin = PlonkverifierMetaData.Bin

// DeployPlonkverifier deploys a new Ethereum contract, binding an instance of Plonkverifier to it.
func DeployPlonkverifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Plonkverifier, error) {
	parsed, err := PlonkverifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PlonkverifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Plonkverifier{PlonkverifierCaller: PlonkverifierCaller{contract: contract}, PlonkverifierTransactor: PlonkverifierTransactor{contract: contract}, PlonkverifierFilterer: PlonkverifierFilterer{contract: contract}}, nil
}

// Plonkverifier is an auto generated Go binding around an Ethereum contract.
type Plonkverifier struct {
	PlonkverifierCaller     // Read-only binding to the contract
	PlonkverifierTransactor // Write-only binding to the contract
	PlonkverifierFilterer   // Log filterer for contract events
}

// PlonkverifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type PlonkverifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkverifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PlonkverifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkverifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PlonkverifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PlonkverifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PlonkverifierSession struct {
	Contract     *Plonkverifier    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PlonkverifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PlonkverifierCallerSession struct {
	Contract *PlonkverifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PlonkverifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PlonkverifierTransactorSession struct {
	Contract     *PlonkverifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PlonkverifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type PlonkverifierRaw struct {
	Contract *Plonkverifier // Generic contract binding to access the raw methods on
}

// PlonkverifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PlonkverifierCallerRaw struct {
	Contract *PlonkverifierCaller // Generic read-only contract binding to access the raw methods on
}

// PlonkverifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PlonkverifierTransactorRaw struct {
	Contract *PlonkverifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPlonkverifier creates a new instance of Plonkverifier, bound to a specific deployed contract.
func NewPlonkverifier(address common.Address, backend bind.ContractBackend) (*Plonkverifier, error) {
	contract, err := bindPlonkverifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Plonkverifier{PlonkverifierCaller: PlonkverifierCaller{contract: contract}, PlonkverifierTransactor: PlonkverifierTransactor{contract: contract}, PlonkverifierFilterer: PlonkverifierFilterer{contract: contract}}, nil
}

// NewPlonkverifierCaller creates a new read-only instance of Plonkverifier, bound to a specific deployed contract.
func NewPlonkverifierCaller(address common.Address, caller bind.ContractCaller) (*PlonkverifierCaller, error) {
	contract, err := bindPlonkverifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkverifierCaller{contract: contract}, nil
}

// NewPlonkverifierTransactor creates a new write-only instance of Plonkverifier, bound to a specific deployed contract.
func NewPlonkverifierTransactor(address common.Address, transactor bind.ContractTransactor) (*PlonkverifierTransactor, error) {
	contract, err := bindPlonkverifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PlonkverifierTransactor{contract: contract}, nil
}

// NewPlonkverifierFilterer creates a new log filterer instance of Plonkverifier, bound to a specific deployed contract.
func NewPlonkverifierFilterer(address common.Address, filterer bind.ContractFilterer) (*PlonkverifierFilterer, error) {
	contract, err := bindPlonkverifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PlonkverifierFilterer{contract: contract}, nil
}

// bindPlonkverifier binds a generic wrapper to an already deployed contract.
func bindPlonkverifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PlonkverifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Plonkverifier *PlonkverifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Plonkverifier.Contract.PlonkverifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Plonkverifier *PlonkverifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Plonkverifier.Contract.PlonkverifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Plonkverifier *PlonkverifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Plonkverifier.Contract.PlonkverifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Plonkverifier *PlonkverifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Plonkverifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Plonkverifier *PlonkverifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Plonkverifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Plonkverifier *PlonkverifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Plonkverifier.Contract.contract.Transact(opts, method, params...)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Plonkverifier *PlonkverifierCaller) Verify(opts *bind.CallOpts, proof []byte, public_inputs []*big.Int) (bool, error) {
	var out []interface{}
	err := _Plonkverifier.contract.Call(opts, &out, "Verify", proof, public_inputs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Plonkverifier *PlonkverifierSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _Plonkverifier.Contract.Verify(&_Plonkverifier.CallOpts, proof, public_inputs)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Plonkverifier *PlonkverifierCallerSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _Plonkverifier.Contract.Verify(&_Plonkverifier.CallOpts, proof, public_inputs)
}
